class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        
        //anagrams are basically which contains the same characters and length of the original word exact same frequency maybe different order
        //we need to group all the anagrams together 
        

        //sub-optimal solution
        // we need to create a sorted array - sort each value individually and then we can easily check the indexes which have the same letters 
        // TIME COMPLEXITY O(nlogn x k) HERE k = biggest length of string we have to compare
        

        //optimal solution
        //create a hashmap have a string generate a frequency array for it the strings which match that frequency array must be anagran so add that into the value where key is the frequency string/array anything we can do that very efficient approach TIME COMPLEXITY O(NXK) AND SPACE COMPLEXITY O(NXK)
        if(strs.length==0)
        {
            return new ArrayList();
        }
        Map<String,List> ansMap = new HashMap<>();

        int[]count = new int[26];

        for(String s : strs)
        {
            Arrays.fill(count,0);
            for(char c : s.toCharArray())
            {
                count[c-'a']++;
            }
            StringBuilder sb = new StringBuilder("");
            for(int i = 0 ; i < 26 ; i++)
            {
                sb.append("#");
                sb.append(count[i]);
            }

            String key = sb.toString();

            if(!ansMap.containsKey(key))
            {
                ansMap.put(key,new ArrayList());
            }
            ansMap.get(key).add(s);

        }
        //making an arraylist out of the ansMap values
        return new ArrayList(ansMap.values());
    
    }
}
